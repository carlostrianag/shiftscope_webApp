/* jshint forin:true, noarg:true, noempty:true, newcap:false, eqeqeq:true, loopfunc:true, bitwise:true, strict:true, undef:true, unused:true, curly:true, browser:true, indent:2, maxerr:50 */
/* global require, exports */

(function(){
  "use strict";

  /*
  .jadeファイルをコンパイルしたりディレクトリ単位でコンパイルしたり。
  */

  var fs     = require("fs");
  var path   = require("path");
  var jade   = require("jade");
  var mkdirp = require("mkdirp");
  var glob   = require("glob");
  var Q      = require("q");

  // ロガー
  var logger          = require( "./logger" ).get( "jade:" );
  var logging_error   = logger.error;
  var logging_success = logger.success;
  var logging_info    = logger.info;

  function isObject(value){
    return typeof value === "object"; // TODO
  }

  /**
   * ファイルを一つ変換する。
   *
   * @param {String} srcFile ソースファイル
   * @param {String} destFile 変換後ファイル
   * @param {Object} options Jadeコンパイル設定
   * @param {Boolean} options.pretty prettyフォーマット
   * @param {Object} options.data テンプレートに渡すデータオブジェクト
   * @return {Object} promiseオブジェクト
   */
  exports.compileFile = function(srcFile, destFile, options){
    var object;

    if( isObject( arguments[0] ) ){
      object   = arguments[0];
      srcFile  = object.srcFile;
      destFile = object.destFile;
      options  = object.options;
    }

    if(typeof options !== "object"){
      options = {};
    }

    if( typeof options.pretty !== "boolean" ){
      options.pretty = true;
    }

    if(typeof options.data !== "object"){
      options.data = {};
    }

    var partial = options.partial || true;
    if( partial ){
      if( path.basename(srcFile).indexOf('_') === 0 ){
        return Q.when();
      }
    }

    var deferred = Q.defer();

    fs.exists(srcFile, function(exists){
      if( !exists ){
        logging_error( "No such found." + srcFile );
        deferred.reject();
        return;
      }

      fs.readFile(srcFile, "utf8", function(err, jadeCode){
        var tmpl, html;

        if( err ){
          logging_error( err );
          deferred.reject( err );
          return;
        }

        try {
          tmpl = jade.compile( jadeCode, {pretty:options.pretty, filename:srcFile} );
          html = tmpl( options.data );
        } catch( ex ){
          deferred.reject( ex );
          logging_error( ex );
        }

        mkdirp( path.dirname( destFile ), function(err){
          if( err ){
            logging_error( err );
            deferred.reject( err );
            return;
          }

          fs.writeFile( destFile, html, "utf8", function(err){
            if( err ){
              logging_error( err );
              deferred.reject( err );
              return;
            }
            logging_success( srcFile,">",destFile );
            deferred.resolve();
          });

        });

      });

    });

    return deferred.promise;
  };

  /**
   * ディレクトリ配下の.jadeをすべてコンパイルする。
   *
   * @param {String} srcDir ソースディレクトリ。
   * @param {String} destDir ディスティネーションディレクトリ。
   * @param {Object} options Jadeコンパイル設定
   * @param {Boolean} options.pretty prettyフォーマット
   * @param {Object} options.data テンプレートに渡すデータオブジェクト
   * @return {Object} promise プロマイズオブジェクト。
   */
  exports.compileDir = function( srcDir, destDir, options ){
    if( isObject( arguments[0] ) ){
      var object = arguments[0];
      srcDir  = object.srcDir;
      destDir = object.destDir;
      options = object.options;
    }

    if( !isObject( options ) ){
      options = {};
    }

    var files = glob.sync( "**/*.jade", {cwd: srcDir} );
    if(files.length === 0){
      return Q.resolve({message: "\"" + srcDir + "\" is empty directory"});
    }
    
    var tasks = [];
    var deferred = Q.defer();

    files.forEach( function(file){
      tasks.push( function(){
        var srcFile  = path.join( srcDir, file );
        var destFile = path.join( destDir, path.dirname( file ), path.basename( file, path.extname(file) ) + ".html" );
        return exports.compileFile( srcFile, destFile, options );
      });
    });

    tasks.reduce( Q.when, Q() ).then( deferred.resolve, deferred.resolve ); //両方 deferred.resolve
    return deferred.promise;
  };

  /**
   * logging
   */
  Object.defineProperty(exports, "logging", {
    set: function(value){
      if( value === false ){
        logging_info = logging_error = logging_success = function(){};
      }
    }
  });

}());
